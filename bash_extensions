# Designed to be used on both dev and production servers
# Read and understand all of this that you use!
#
# As the license says:
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

###############################################################################
# Basics
###############################################################################

# lots of history, available from all tabs and terminals:
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=1000000                  # big big history
export HISTFILESIZE=1000000              # big big history
# shopt -s histappend                      # append to history, don't overwrite it

# fixes https://github.com/asdf-vm/asdf/issues/279#issue-290858023
# and possibly other issues:
# touch $HOME/.bash_sessions_disable

ulimit -n 1024

# securely erase files before removing:
alias rms='rm -P'

alias ll='ls -lFh'
alias lla='ls -lFah'
alias llt='ls -lhFart'

alias pd='pushd'
alias pop='popd'

alias a=alias
alias h='history | tail -50'

alias hk=heroku

# eg "ag rake" to see all rake-related aliases
function ga {
  alias | grep "$1" | grep -v grep
}

alias ezsh='$EDITOR ~/.zshrc'
alias ezshe='$EDITOR ~/.dev_env'
alias szsh='. ~/.zshrc'

# remove all .svn dirs in the current dir and subdirs
alias rmsvn='find . -name ".svn" -exec rm -rf "{}" \;'
alias rmds='find . -name ".DS_Store" -exec rm -rf "{}" \;'

alias rsink='rsync --archive --compress --verbose --progress --human-readable'
alias rsinkd='rsink --delete'

alias pg='ping www.google.com'

# eg "psg mysql" to see all mysql processes
function psg {
  ps wwwaux | egrep "($1|%CPU)" | grep -v grep
}

# eg "port 3000" to see what is running there
function port {
  lsof -i -n -P | grep TCP | grep "$1"
}

# Display folder and it's content as a tree
function tree {
  find ${1:-.} -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
}

# GIT

alias g=git
alias wip='git commit -m WIP'

export GIT_DUET_CO_AUTHORED_BY=1

# [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
# [[ -r "/usr/local/opt/git/etc/bash_completion.d/git-prompt.sh" ]] && . "/usr/local/opt/git/etc/bash_completion.d/git-prompt.sh"
# export DISABLE_UNTRACKED_FILES_DIRTY=false
# export GIT_PS1_SHOWDIRTYSTATE=true
# export GIT_PS1_SHOWCOLORHINTS=1
# export PROMPT_COMMAND='__git_ps1 "\W" "\\\$ "'
# export PROMPT_COMMAND='__git_ps1 "\w" "\[\e[0m\]\[\e[1;36m\] $ \[\e[0m\]"'

###############################################################################
# AWS
###############################################################################

alias ecs='ecs-cli'

###############################################################################
# Docker
###############################################################################

alias d='docker'
alias dc='docker-compose'
alias dnuke='docker container rm --force --volumes $(docker container ls --quiet --all) ; docker network rm $(docker network ls -q)'

###############################################################################
# Elixir / Erlang
###############################################################################

export ERL_AFLAGS="-kernel shell_history enabled"
alias m='mix'

###############################################################################
# OSX
###############################################################################

if [ $OSTYPE != 'linux-gnu' ]; then

  export PATH="~/bin:/usr/local/share/npm/bin:/usr/local/bin:/usr/local/sbin:/usr/local/lib:/usr/sbin:$PATH"

  export MANPATH=$MANPATH:/opt/local/man
  export EDITOR='code'
  alias vs=code

  # For homebrew-based mysql install:
  alias mystop='/usr/local/opt/mysql56/bin/mysql.server stop'  #  ; killall mysqld'
  alias mystart='/usr/local/opt/mysql56/bin/mysql.server start'

  alias camera='sudo killall VDCAssistant'
  # if that fails, add or try: sudo killall AppleCameraAssistant
fi

###############################################################################
# Node.js
###############################################################################

# NVM

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Yarn

sleep 0.1 && export PATH="$PATH:`yarn global bin`"

alias yup='npm-check-updates --upgrade && yarn && yarn upgrade'  # if this fails:  `npm upgrade -g npm-check-updates`

alias y='yarn'
alias yt='yarn test'
alias yr='yarn run'

function yi {
  yarn add $*
}
function ya {
  yarn add $*
}
function yad {
  yarn add $* --dev
}

# NPM

alias nbump='npm version patch'
alias npub='npm version patch && git push --tags origin HEAD && npm publish'
# alias nup='ncu --upgrade && npm update && npm prune'  # if this fails:  `npm upgrade -g npm-check-updates`
alias n='npm'
alias nt='npm test'
alias nr='npm run'
alias links='ll node_modules | grep \\-\>'

function ni  {
  npm install            $1 && npm prune
}
function nis {
  npm install --save     $1 && npm prune
}
function nid {
  npm install --save-dev $1 && npm prune
}

function nv {
  npm show $1 versions
}

###############################################################################
# Ruby
###############################################################################

# rbenv:
eval "$(rbenv init -)"

# Bundler

alias be='bundle exec'
alias bi='bundle install'
alias biq='bi --quiet'
alias biw='bi --without=development:test'
alias bid='biw --deployment'
alias bis='gemrat --no-version'  # implements missing `bundle install --save` -- requires you first `gem install gemrat`

# Foreman

alias frun='be foreman run'
alias fcon='be foreman run irb'
alias fser='biq && be rerun foreman start'

# Rails

alias sp='bin/rspec --color'
alias sn='sp --format documentation'
alias sf='sp --require fuubar --format Fuubar'

alias r='bin/rails'
alias rs='biq && be foreman run "rails server"'

alias br='bundle exec rake'
alias rdr='br db:rebuild'
alias rdm='be rake db:migrate'
alias rtp='br db:test:prepare'
alias rds='br db:seed'

alias ss='spring stop'

# ###############################################################################
# # asdf
# ###############################################################################

# . $HOME/.asdf/asdf.sh
# . $HOME/.asdf/completions/asdf.bash

###############################################################################
# Other
###############################################################################

alias hs='http-server -c-1'

alias pjson='underscore print --color'

alias pgstart='pg_ctl -D /usr/local/var/postgres start'
alias pgstop='pg_ctl -D /usr/local/var/postgres stop'

export PATH=/usr/local/opt/postgresql\@10/bin:$PATH

#alias tomcat-start='/usr/local/Cellar/tomcat6/6.0.45/bin/startup.sh'
#alias tomcat-shutdown='/usr/local/Cellar/tomcat6/6.0.45/bin/shutdown.sh'
#alias tomcat-stop='/usr/local/Cellar/tomcat6/6.0.45/bin/shutdown.sh'

if [ $OSTYPE = 'linux-gnu' ]; then
  export EDITOR=`which nano`
fi

# This echoes a bunch of color codes to the terminal to demonstrate
# what's available. Each line is the color code of one forground color,
# out of 17 (default + 16 escapes), followed by a test use of that color
# on all nine background colors (default + 8 escapes).
# from http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux
#
function colors {
  T='Fox'   # The test text
  echo -e "\n                 40m     41m     42m     43m     44m     45m     46m     47m";
  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' '  36m' '1;36m' '  37m' '1;37m';
    do FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
      do echo -en "$EINS \033[$FG\033[$BG  $T \033[0m\033[$BG \033[0m";
    done
    echo;
  done
  echo
}
